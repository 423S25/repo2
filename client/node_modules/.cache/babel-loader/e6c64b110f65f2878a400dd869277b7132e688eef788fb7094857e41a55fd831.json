{"ast":null,"code":"'use client';\n\nimport { useCallback } from 'react';\nimport { changeErrorIndices } from '../../lists/change-error-indices.mjs';\nimport { reorderErrors } from '../../lists/reorder-errors.mjs';\nimport 'klona/full';\nimport { reorderPath } from '../../paths/reorder-path.mjs';\nimport { insertPath } from '../../paths/insert-path.mjs';\nimport { removePath } from '../../paths/remove-path.mjs';\nimport { replacePath } from '../../paths/replace-path.mjs';\nfunction useFormList({\n  $values,\n  $errors,\n  $status\n}) {\n  const reorderListItem = useCallback((path, payload) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => reorderErrors(path, payload, errs));\n    $values.setValues({\n      values: reorderPath(path, payload, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const removeListItem = useCallback((path, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => changeErrorIndices(path, index, errs, -1));\n    $values.setValues({\n      values: removePath(path, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const insertListItem = useCallback((path, item, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => changeErrorIndices(path, index, errs, 1));\n    $values.setValues({\n      values: insertPath(path, item, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const replaceListItem = useCallback((path, index, item) => {\n    $status.clearFieldDirty(path);\n    $values.setValues({\n      values: replacePath(path, item, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  return {\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    replaceListItem\n  };\n}\nexport { useFormList };","map":{"version":3,"names":["useFormList","$values","$errors","$status","reorderListItem","useCallback","path","payload","clearFieldDirty","setErrors","errs","reorderErrors","setValues","values","reorderPath","refValues","current","updateState","removeListItem","index","changeErrorIndices","removePath","insertListItem","item","insertPath","replaceListItem","replacePath"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/hooks/use-form-list/use-form-list.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { changeErrorIndices, reorderErrors } from '../../lists';\nimport { insertPath, removePath, reorderPath, replacePath } from '../../paths';\nimport { InsertListItem, RemoveListItem, ReorderListItem, ReplaceListItem } from '../../types';\nimport type { $FormErrors } from '../use-form-errors/use-form-errors';\nimport type { $FormStatus } from '../use-form-status/use-form-status';\nimport type { $FormValues } from '../use-form-values/use-form-values';\n\ninterface UseFormListInput<Values extends Record<string, any>> {\n  $values: $FormValues<Values>;\n  $errors: $FormErrors<Values>;\n  $status: $FormStatus<Values>;\n}\n\nexport function useFormList<Values extends Record<string, any>>({\n  $values,\n  $errors,\n  $status,\n}: UseFormListInput<Values>) {\n  const reorderListItem: ReorderListItem<Values> = useCallback((path, payload) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => reorderErrors(path, payload, errs));\n    $values.setValues({\n      values: reorderPath(path, payload, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const removeListItem: RemoveListItem<Values> = useCallback((path, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => changeErrorIndices(path, index, errs, -1));\n    $values.setValues({\n      values: removePath(path, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const insertListItem: InsertListItem<Values> = useCallback((path, item, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => changeErrorIndices(path, index, errs, 1));\n    $values.setValues({\n      values: insertPath(path, item, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const replaceListItem: ReplaceListItem<Values> = useCallback((path, index, item) => {\n    $status.clearFieldDirty(path);\n    $values.setValues({\n      values: replacePath(path, item, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  return { reorderListItem, removeListItem, insertListItem, replaceListItem };\n}\n"],"mappings":";;;;;;;;;;AAcO,SAASA,WAAgDA,CAAA;EAC9DC,OAAA;EACAC,OAAA;EACAC;AACF,CAA6B;EAC3B,MAAMC,eAA2C,GAAAC,WAAA,CAAY,CAACC,IAAA,EAAMC,OAAY;IAC9EJ,OAAA,CAAQK,eAAA,CAAgBF,IAAI;IAC5BJ,OAAA,CAAQO,SAAA,CAAWC,IAAA,IAASC,aAAA,CAAcL,IAAM,EAAAC,OAAA,EAASG,IAAI,CAAC;IAC9DT,OAAA,CAAQW,SAAU;MAChBC,MAAA,EAAQC,WAAY,CAAAR,IAAA,EAAMC,OAAS,EAAAN,OAAA,CAAQc,SAAA,CAAUC,OAAO;MAC5DC,WAAa;IAAA,CACd;EACH,GAAG,EAAE;EAEL,MAAMC,cAAyC,GAAAb,WAAA,CAAY,CAACC,IAAA,EAAMa,KAAU;IAC1EhB,OAAA,CAAQK,eAAA,CAAgBF,IAAI;IACpBJ,OAAA,CAAAO,SAAA,CAAWC,IAAS,IAAAU,kBAAA,CAAmBd,IAAA,EAAMa,KAAO,EAAAT,IAAA,EAAM,EAAE,CAAC;IACrET,OAAA,CAAQW,SAAU;MAChBC,MAAA,EAAQQ,UAAW,CAAAf,IAAA,EAAMa,KAAO,EAAAlB,OAAA,CAAQc,SAAA,CAAUC,OAAO;MACzDC,WAAa;IAAA,CACd;EACH,GAAG,EAAE;EAEL,MAAMK,cAAyC,GAAAjB,WAAA,CAAY,CAACC,IAAA,EAAMiB,IAAA,EAAMJ,KAAU;IAChFhB,OAAA,CAAQK,eAAA,CAAgBF,IAAI;IACpBJ,OAAA,CAAAO,SAAA,CAAWC,IAAS,IAAAU,kBAAA,CAAmBd,IAAA,EAAMa,KAAO,EAAAT,IAAA,EAAM,CAAC,CAAC;IACpET,OAAA,CAAQW,SAAU;MAChBC,MAAA,EAAQW,UAAW,CAAAlB,IAAA,EAAMiB,IAAA,EAAMJ,KAAO,EAAAlB,OAAA,CAAQc,SAAA,CAAUC,OAAO;MAC/DC,WAAa;IAAA,CACd;EACH,GAAG,EAAE;EAEL,MAAMQ,eAA2C,GAAApB,WAAA,CAAY,CAACC,IAAA,EAAMa,KAAA,EAAOI,IAAS;IAClFpB,OAAA,CAAQK,eAAA,CAAgBF,IAAI;IAC5BL,OAAA,CAAQW,SAAU;MAChBC,MAAA,EAAQa,WAAY,CAAApB,IAAA,EAAMiB,IAAA,EAAMJ,KAAO,EAAAlB,OAAA,CAAQc,SAAA,CAAUC,OAAO;MAChEC,WAAa;IAAA,CACd;EACH,GAAG,EAAE;EAEL,OAAO;IAAEb,eAAA;IAAiBc,cAAgB;IAAAI,cAAA;IAAgBG;EAAgB;AAC5E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}