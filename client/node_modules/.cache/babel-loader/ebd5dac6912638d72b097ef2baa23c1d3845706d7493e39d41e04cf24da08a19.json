{"ast":null,"code":"'use client';\n\nimport { useLayoutEffect, useEffect } from 'react';\nfunction dispatchEvent(type, detail) {\n  window.dispatchEvent(new CustomEvent(type, {\n    detail\n  }));\n}\nfunction validateFormName(name) {\n  if (!/^[0-9a-zA-Z-]+$/.test(name)) {\n    throw new Error(`[@mantine/use-form] Form name \"${name}\" is invalid, it should contain only letters, numbers and dashes`);\n  }\n}\nconst useIsomorphicEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\nfunction createFormActions(name) {\n  validateFormName(name);\n  const setFieldValue = (path, value) => dispatchEvent(`mantine-form:${name}:set-field-value`, {\n    path,\n    value\n  });\n  const setValues = values => dispatchEvent(`mantine-form:${name}:set-values`, values);\n  const setInitialValues = values => dispatchEvent(`mantine-form:${name}:set-initial-values`, values);\n  const setErrors = errors => dispatchEvent(`mantine-form:${name}:set-errors`, errors);\n  const setFieldError = (path, error) => dispatchEvent(`mantine-form:${name}:set-field-error`, {\n    path,\n    error\n  });\n  const clearFieldError = path => dispatchEvent(`mantine-form:${name}:clear-field-error`, path);\n  const clearErrors = () => dispatchEvent(`mantine-form:${name}:clear-errors`);\n  const reset = () => dispatchEvent(`mantine-form:${name}:reset`);\n  const validate = () => dispatchEvent(`mantine-form:${name}:validate`);\n  const validateField = path => dispatchEvent(`mantine-form:${name}:validate-field`, path);\n  const reorderListItem = (path, payload) => dispatchEvent(`mantine-form:${name}:reorder-list-item`, {\n    path,\n    payload\n  });\n  const removeListItem = (path, index) => dispatchEvent(`mantine-form:${name}:remove-list-item`, {\n    path,\n    index\n  });\n  const insertListItem = (path, item, index) => dispatchEvent(`mantine-form:${name}:insert-list-item`, {\n    path,\n    index,\n    item\n  });\n  const setDirty = value => dispatchEvent(`mantine-form:${name}:set-dirty`, value);\n  const setTouched = value => dispatchEvent(`mantine-form:${name}:set-touched`, value);\n  const resetDirty = values => dispatchEvent(`mantine-form:${name}:reset-dirty`, values);\n  const resetTouched = () => dispatchEvent(`mantine-form:${name}:reset-touched`);\n  return {\n    setFieldValue,\n    setValues,\n    setInitialValues,\n    setErrors,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    setDirty,\n    setTouched,\n    resetDirty,\n    resetTouched\n  };\n}\nfunction useFormEvent(eventKey, handler) {\n  useIsomorphicEffect(() => {\n    if (eventKey) {\n      window.addEventListener(eventKey, handler);\n      return () => window.removeEventListener(eventKey, handler);\n    }\n    return void 0;\n  }, [eventKey]);\n}\nfunction useFormActions(name, form) {\n  if (name) {\n    validateFormName(name);\n  }\n  useFormEvent(`mantine-form:${name}:set-field-value`, event => form.setFieldValue(event.detail.path, event.detail.value));\n  useFormEvent(`mantine-form:${name}:set-values`, event => form.setValues(event.detail));\n  useFormEvent(`mantine-form:${name}:set-initial-values`, event => form.setInitialValues(event.detail));\n  useFormEvent(`mantine-form:${name}:set-errors`, event => form.setErrors(event.detail));\n  useFormEvent(`mantine-form:${name}:set-field-error`, event => form.setFieldError(event.detail.path, event.detail.error));\n  useFormEvent(`mantine-form:${name}:clear-field-error`, event => form.clearFieldError(event.detail));\n  useFormEvent(`mantine-form:${name}:clear-errors`, form.clearErrors);\n  useFormEvent(`mantine-form:${name}:reset`, form.reset);\n  useFormEvent(`mantine-form:${name}:validate`, form.validate);\n  useFormEvent(`mantine-form:${name}:validate-field`, event => form.validateField(event.detail));\n  useFormEvent(`mantine-form:${name}:reorder-list-item`, event => form.reorderListItem(event.detail.path, event.detail.payload));\n  useFormEvent(`mantine-form:${name}:remove-list-item`, event => form.removeListItem(event.detail.path, event.detail.index));\n  useFormEvent(`mantine-form:${name}:insert-list-item`, event => form.insertListItem(event.detail.path, event.detail.item, event.detail.index));\n  useFormEvent(`mantine-form:${name}:set-dirty`, event => form.setDirty(event.detail));\n  useFormEvent(`mantine-form:${name}:set-touched`, event => form.setTouched(event.detail));\n  useFormEvent(`mantine-form:${name}:reset-dirty`, event => form.resetDirty(event.detail));\n  useFormEvent(`mantine-form:${name}:reset-touched`, form.resetTouched);\n}\nexport { createFormActions, useFormActions, useIsomorphicEffect };","map":{"version":3,"names":["dispatchEvent","type","detail","window","CustomEvent","validateFormName","name","test","Error","useIsomorphicEffect","useLayoutEffect","useEffect","createFormActions","setFieldValue","path","value","setValues","values","setInitialValues","setErrors","errors","setFieldError","error","clearFieldError","clearErrors","reset","validate","validateField","reorderListItem","payload","removeListItem","index","insertListItem","item","setDirty","setTouched","resetDirty","resetTouched","useFormEvent","eventKey","handler","addEventListener","removeEventListener","useFormActions","form","event"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/actions/actions.ts"],"sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nimport type {\n  _TransformValues,\n  ClearErrors,\n  ClearFieldError,\n  InsertListItem,\n  RemoveListItem,\n  ReorderListItem,\n  Reset,\n  ResetDirty,\n  ResetStatus,\n  SetErrors,\n  SetFieldError,\n  SetFieldValue,\n  SetFormStatus,\n  SetInitialValues,\n  SetValues,\n  UseFormReturnType,\n  ValidateField,\n} from '../types';\n\nfunction dispatchEvent(type: string, detail?: any): any {\n  window.dispatchEvent(new CustomEvent(type, { detail }));\n}\n\nfunction validateFormName(name: string) {\n  if (!/^[0-9a-zA-Z-]+$/.test(name)) {\n    throw new Error(\n      `[@mantine/use-form] Form name \"${name}\" is invalid, it should contain only letters, numbers and dashes`\n    );\n  }\n}\n\nexport const useIsomorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport function createFormActions<FormValues extends Record<string, any> = Record<string, any>>(\n  name: string\n) {\n  validateFormName(name);\n\n  const setFieldValue: SetFieldValue<FormValues> = (path, value) =>\n    dispatchEvent(`mantine-form:${name}:set-field-value`, { path, value });\n\n  const setValues: SetValues<FormValues> = (values) =>\n    dispatchEvent(`mantine-form:${name}:set-values`, values);\n\n  const setInitialValues: SetInitialValues<FormValues> = (values) =>\n    dispatchEvent(`mantine-form:${name}:set-initial-values`, values);\n\n  const setErrors: SetErrors = (errors) => dispatchEvent(`mantine-form:${name}:set-errors`, errors);\n\n  const setFieldError: SetFieldError<FormValues> = (path, error) =>\n    dispatchEvent(`mantine-form:${name}:set-field-error`, { path, error });\n\n  const clearFieldError: ClearFieldError = (path) =>\n    dispatchEvent(`mantine-form:${name}:clear-field-error`, path);\n\n  const clearErrors: ClearErrors = () => dispatchEvent(`mantine-form:${name}:clear-errors`);\n\n  const reset: Reset = () => dispatchEvent(`mantine-form:${name}:reset`);\n\n  const validate: () => void = () => dispatchEvent(`mantine-form:${name}:validate`);\n\n  const validateField: ValidateField<FormValues> = (path) =>\n    dispatchEvent(`mantine-form:${name}:validate-field`, path);\n\n  const reorderListItem: ReorderListItem<FormValues> = (path, payload) =>\n    dispatchEvent(`mantine-form:${name}:reorder-list-item`, { path, payload });\n\n  const removeListItem: RemoveListItem<FormValues> = (path, index) =>\n    dispatchEvent(`mantine-form:${name}:remove-list-item`, { path, index });\n\n  const insertListItem: InsertListItem<FormValues> = (path, item, index) =>\n    dispatchEvent(`mantine-form:${name}:insert-list-item`, { path, index, item });\n\n  const setDirty: SetFormStatus = (value) => dispatchEvent(`mantine-form:${name}:set-dirty`, value);\n\n  const setTouched: SetFormStatus = (value) =>\n    dispatchEvent(`mantine-form:${name}:set-touched`, value);\n\n  const resetDirty: ResetDirty<FormValues> = (values) =>\n    dispatchEvent(`mantine-form:${name}:reset-dirty`, values);\n\n  const resetTouched: ResetStatus = () => dispatchEvent(`mantine-form:${name}:reset-touched`);\n\n  return {\n    setFieldValue,\n    setValues,\n    setInitialValues,\n    setErrors,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    setDirty,\n    setTouched,\n    resetDirty,\n    resetTouched,\n  };\n}\n\nfunction useFormEvent(eventKey: string | undefined, handler: (event: any) => void) {\n  useIsomorphicEffect(() => {\n    if (eventKey) {\n      window.addEventListener(eventKey, handler);\n      return () => window.removeEventListener(eventKey, handler);\n    }\n    return undefined;\n  }, [eventKey]);\n}\n\nexport function useFormActions<\n  Values = Record<string, unknown>,\n  TransformValues extends _TransformValues<Values> = (values: Values) => Values,\n>(name: string | undefined, form: UseFormReturnType<Values, TransformValues>) {\n  if (name) {\n    validateFormName(name);\n  }\n\n  useFormEvent(`mantine-form:${name}:set-field-value`, (event: CustomEvent) =>\n    form.setFieldValue(event.detail.path, event.detail.value)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-values`, (event: CustomEvent) =>\n    form.setValues(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-initial-values`, (event: CustomEvent) =>\n    form.setInitialValues(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-errors`, (event: CustomEvent) =>\n    form.setErrors(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-field-error`, (event: CustomEvent) =>\n    form.setFieldError(event.detail.path, event.detail.error)\n  );\n\n  useFormEvent(`mantine-form:${name}:clear-field-error`, (event: CustomEvent) =>\n    form.clearFieldError(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:clear-errors`, form.clearErrors);\n  useFormEvent(`mantine-form:${name}:reset`, form.reset);\n  useFormEvent(`mantine-form:${name}:validate`, form.validate);\n\n  useFormEvent(`mantine-form:${name}:validate-field`, (event: CustomEvent) =>\n    form.validateField(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:reorder-list-item`, (event: CustomEvent) =>\n    form.reorderListItem(event.detail.path, event.detail.payload)\n  );\n\n  useFormEvent(`mantine-form:${name}:remove-list-item`, (event: CustomEvent) =>\n    form.removeListItem(event.detail.path, event.detail.index)\n  );\n\n  useFormEvent(`mantine-form:${name}:insert-list-item`, (event: CustomEvent) =>\n    form.insertListItem(event.detail.path, event.detail.item, event.detail.index)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-dirty`, (event: CustomEvent) =>\n    form.setDirty(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:set-touched`, (event: CustomEvent) =>\n    form.setTouched(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:reset-dirty`, (event: CustomEvent) =>\n    form.resetDirty(event.detail)\n  );\n\n  useFormEvent(`mantine-form:${name}:reset-touched`, form.resetTouched);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}