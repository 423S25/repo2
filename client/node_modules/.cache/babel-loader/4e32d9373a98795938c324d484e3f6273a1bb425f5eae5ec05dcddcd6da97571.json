{"ast":null,"code":"'use client';\n\nimport { useRef, useState, useCallback } from 'react';\nimport { getPath } from '../../paths/get-path.mjs';\nimport { setPath } from '../../paths/set-path.mjs';\nfunction useFormValues({\n  initialValues,\n  onValuesChange,\n  mode\n}) {\n  const initialized = useRef(false);\n  const [stateValues, setStateValues] = useState(initialValues || {});\n  const refValues = useRef(stateValues);\n  const valuesSnapshot = useRef(stateValues);\n  const setValues = useCallback(({\n    values,\n    subscribers,\n    updateState = true,\n    mergeWithPreviousValues = true\n  }) => {\n    const previousValues = refValues.current;\n    const resolvedValues = values instanceof Function ? values(refValues.current) : values;\n    const updatedValues = mergeWithPreviousValues ? {\n      ...previousValues,\n      ...resolvedValues\n    } : resolvedValues;\n    refValues.current = updatedValues;\n    updateState && setStateValues(updatedValues);\n    onValuesChange?.(updatedValues, previousValues);\n    subscribers?.filter(Boolean).forEach(subscriber => subscriber({\n      updatedValues,\n      previousValues\n    }));\n  }, [onValuesChange]);\n  const setFieldValue = useCallback(payload => {\n    const currentValue = getPath(payload.path, refValues.current);\n    const updatedValue = payload.value instanceof Function ? payload.value(currentValue) : payload.value;\n    if (currentValue !== updatedValue) {\n      const previousValues = refValues.current;\n      const updatedValues = setPath(payload.path, updatedValue, refValues.current);\n      setValues({\n        values: updatedValues,\n        updateState: payload.updateState\n      });\n      payload.subscribers?.filter(Boolean).forEach(subscriber => subscriber({\n        path: payload.path,\n        updatedValues,\n        previousValues\n      }));\n    }\n  }, [setValues]);\n  const setValuesSnapshot = useCallback(payload => {\n    valuesSnapshot.current = payload;\n  }, []);\n  const initialize = useCallback((values, onInitialize) => {\n    if (!initialized.current) {\n      initialized.current = true;\n      setValues({\n        values,\n        updateState: mode === \"controlled\"\n      });\n      setValuesSnapshot(values);\n      onInitialize();\n    }\n  }, [setValues]);\n  const resetValues = useCallback(() => {\n    setValues({\n      values: valuesSnapshot.current,\n      updateState: true,\n      mergeWithPreviousValues: false\n    });\n  }, [setValues]);\n  const getValues = useCallback(() => refValues.current, []);\n  const getValuesSnapshot = useCallback(() => valuesSnapshot.current, []);\n  return {\n    initialized,\n    stateValues,\n    refValues,\n    valuesSnapshot,\n    setValues,\n    setFieldValue,\n    resetValues,\n    setValuesSnapshot,\n    initialize,\n    getValues,\n    getValuesSnapshot\n  };\n}\nexport { useFormValues };","map":{"version":3,"names":["useFormValues","initialValues","onValuesChange","mode","initialized","useRef","stateValues","setStateValues","useState","refValues","valuesSnapshot","setValues","useCallback","values","subscribers","updateState","mergeWithPreviousValues","previousValues","current","resolvedValues","Function","updatedValues","filter","Boolean","forEach","subscriber","setFieldValue","payload","currentValue","getPath","path","updatedValue","value","setPath","setValuesSnapshot","initialize","onInitialize","resetValues","getValues","getValuesSnapshot"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/hooks/use-form-values/use-form-values.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { getPath, setPath } from '../../paths';\nimport { FormMode } from '../../types';\n\nexport interface $FormValues<Values extends Record<PropertyKey, any>> {\n  initialized: React.MutableRefObject<boolean>;\n  stateValues: Values;\n  refValues: React.MutableRefObject<Values>;\n  valuesSnapshot: React.MutableRefObject<Values>;\n  setValues: (payload: SetValuesInput<Values>) => void;\n  setFieldValue: (payload: SetFieldValueInput<Values>) => void;\n  resetValues: () => void;\n  setValuesSnapshot: (payload: Values) => void;\n  initialize: (values: Values, onInitialize: () => void) => void;\n  getValues: () => Values;\n  getValuesSnapshot: () => Values;\n}\n\nexport interface SetValuesSubscriberPayload<Values> {\n  path?: PropertyKey;\n  updatedValues: Values;\n  previousValues: Values;\n}\n\nexport interface SetValuesInput<Values> {\n  values: Partial<Values> | ((values: Values) => Partial<Values>);\n  mergeWithPreviousValues?: boolean;\n  updateState?: boolean;\n  subscribers?: (SetFieldValueSubscriber<Values> | null | undefined)[];\n}\n\nexport type SetFieldValueSubscriber<Values> = (payload: SetValuesSubscriberPayload<Values>) => void;\n\nexport interface SetFieldValueInput<Values> {\n  path: PropertyKey;\n  value: any;\n  updateState?: boolean;\n  subscribers?: (SetFieldValueSubscriber<Values> | null | undefined)[];\n}\n\ninterface UseFormValuesInput<Values extends Record<PropertyKey, any>> {\n  initialValues: Values | undefined;\n  mode: FormMode;\n  onValuesChange?: ((values: Values, previousValues: Values) => void) | undefined;\n}\n\nexport function useFormValues<Values extends Record<PropertyKey, any>>({\n  initialValues,\n  onValuesChange,\n  mode,\n}: UseFormValuesInput<Values>): $FormValues<Values> {\n  const initialized = useRef(false);\n  const [stateValues, setStateValues] = useState<Values>(initialValues || ({} as Values));\n  const refValues = useRef(stateValues);\n  const valuesSnapshot = useRef(stateValues);\n\n  const setValues = useCallback(\n    ({\n      values,\n      subscribers,\n      updateState = true,\n      mergeWithPreviousValues = true,\n    }: SetValuesInput<Values>) => {\n      const previousValues = refValues.current;\n      const resolvedValues = values instanceof Function ? values(refValues.current) : values;\n      const updatedValues = mergeWithPreviousValues\n        ? { ...previousValues, ...resolvedValues }\n        : (resolvedValues as Values);\n      refValues.current = updatedValues;\n      updateState && setStateValues(updatedValues);\n      onValuesChange?.(updatedValues, previousValues);\n      subscribers\n        ?.filter(Boolean)\n        .forEach((subscriber) => subscriber!({ updatedValues, previousValues }));\n    },\n    [onValuesChange]\n  );\n\n  const setFieldValue = useCallback(\n    (payload: SetFieldValueInput<Values>) => {\n      const currentValue = getPath(payload.path, refValues.current);\n      const updatedValue =\n        payload.value instanceof Function ? payload.value(currentValue) : payload.value;\n\n      if (currentValue !== updatedValue) {\n        const previousValues = refValues.current;\n        const updatedValues = setPath(payload.path, updatedValue, refValues.current);\n        setValues({ values: updatedValues, updateState: payload.updateState });\n\n        payload.subscribers\n          ?.filter(Boolean)\n          .forEach((subscriber) =>\n            subscriber!({ path: payload.path, updatedValues, previousValues })\n          );\n      }\n    },\n    [setValues]\n  );\n\n  const setValuesSnapshot = useCallback((payload: Values) => {\n    valuesSnapshot.current = payload;\n  }, []);\n\n  const initialize = useCallback(\n    (values: Values, onInitialize: () => void) => {\n      if (!initialized.current) {\n        initialized.current = true;\n        setValues({ values, updateState: mode === 'controlled' });\n        setValuesSnapshot(values);\n        onInitialize();\n      }\n    },\n    [setValues]\n  );\n\n  const resetValues = useCallback(() => {\n    setValues({\n      values: valuesSnapshot.current,\n      updateState: true,\n      mergeWithPreviousValues: false,\n    });\n  }, [setValues]);\n\n  const getValues = useCallback(() => refValues.current, []);\n  const getValuesSnapshot = useCallback(() => valuesSnapshot.current, []);\n\n  return {\n    initialized,\n    stateValues,\n    refValues,\n    valuesSnapshot,\n    setValues,\n    setFieldValue,\n    resetValues,\n    setValuesSnapshot,\n    initialize,\n    getValues,\n    getValuesSnapshot,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}