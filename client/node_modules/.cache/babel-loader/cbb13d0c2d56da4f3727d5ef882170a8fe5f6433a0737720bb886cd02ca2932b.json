{"ast":null,"code":"'use client';\n\nimport { randomId } from '@mantine/hooks';\nimport { createStore, useStore } from '@mantine/store';\nfunction getDistributedNotifications(data, defaultPosition, limit) {\n  const queue = [];\n  const notifications2 = [];\n  const count = {};\n  for (const item of data) {\n    const position = item.position || defaultPosition;\n    count[position] = count[position] || 0;\n    count[position] += 1;\n    if (count[position] <= limit) {\n      notifications2.push(item);\n    } else {\n      queue.push(item);\n    }\n  }\n  return {\n    notifications: notifications2,\n    queue\n  };\n}\nconst createNotificationsStore = () => createStore({\n  notifications: [],\n  queue: [],\n  defaultPosition: \"bottom-right\",\n  limit: 5\n});\nconst notificationsStore = createNotificationsStore();\nconst useNotifications = (store = notificationsStore) => useStore(store);\nfunction updateNotificationsState(store, update) {\n  const state = store.getState();\n  const notifications2 = update([...state.notifications, ...state.queue]);\n  const updated = getDistributedNotifications(notifications2, state.defaultPosition, state.limit);\n  store.setState({\n    notifications: updated.notifications,\n    queue: updated.queue,\n    limit: state.limit,\n    defaultPosition: state.defaultPosition\n  });\n}\nfunction showNotification(notification, store = notificationsStore) {\n  const id = notification.id || randomId();\n  updateNotificationsState(store, notifications2 => {\n    if (notification.id && notifications2.some(n => n.id === notification.id)) {\n      return notifications2;\n    }\n    return [...notifications2, {\n      ...notification,\n      id\n    }];\n  });\n  return id;\n}\nfunction hideNotification(id, store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.filter(notification => {\n    if (notification.id === id) {\n      notification.onClose?.(notification);\n      return false;\n    }\n    return true;\n  }));\n  return id;\n}\nfunction updateNotification(notification, store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.map(item => {\n    if (item.id === notification.id) {\n      return {\n        ...item,\n        ...notification\n      };\n    }\n    return item;\n  }));\n  return notification.id;\n}\nfunction cleanNotifications(store = notificationsStore) {\n  updateNotificationsState(store, () => []);\n}\nfunction cleanNotificationsQueue(store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.slice(0, store.getState().limit));\n}\nconst notifications = {\n  show: showNotification,\n  hide: hideNotification,\n  update: updateNotification,\n  clean: cleanNotifications,\n  cleanQueue: cleanNotificationsQueue,\n  updateState: updateNotificationsState\n};\nexport { cleanNotifications, cleanNotificationsQueue, createNotificationsStore, hideNotification, notifications, notificationsStore, showNotification, updateNotification, updateNotificationsState, useNotifications };","map":{"version":3,"names":["getDistributedNotifications","data","defaultPosition","limit","queue","notifications2","count","item","position","push","notifications","createNotificationsStore","createStore","notificationsStore","useNotifications","store","useStore","updateNotificationsState","update","state","getState","updated","setState","showNotification","notification","id","randomId","some","n","hideNotification","filter","onClose","updateNotification","map","cleanNotifications","cleanNotificationsQueue","slice","show","hide","clean","cleanQueue","updateState"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/notifications/src/notifications.store.ts"],"sourcesContent":["import { NotificationProps } from '@mantine/core';\nimport { randomId } from '@mantine/hooks';\nimport { createStore, MantineStore, useStore } from '@mantine/store';\n\nexport type NotificationPosition =\n  | 'top-left'\n  | 'top-right'\n  | 'top-center'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'bottom-center';\n\nexport interface NotificationData\n  extends Omit<NotificationProps, 'onClose'>,\n    Record<`data-${string}`, any> {\n  /** Notification id, can be used to close or update notification */\n  id?: string;\n\n  /** Position of the notification, if not set, the position is determined based on `position` prop on Notifications component */\n  position?: NotificationPosition;\n\n  /** Notification message, required for all notifications */\n  message: React.ReactNode;\n\n  /** Determines whether notification should be closed automatically,\n   *  number is auto close timeout in ms, overrides `autoClose` from `Notifications`\n   * */\n  autoClose?: boolean | number;\n\n  /** Called when notification closes */\n  onClose?: (props: NotificationData) => void;\n\n  /** Called when notification opens */\n  onOpen?: (props: NotificationData) => void;\n}\n\nexport interface NotificationsState {\n  notifications: NotificationData[];\n  queue: NotificationData[];\n  defaultPosition: NotificationPosition;\n  limit: number;\n}\n\nexport type NotificationsStore = MantineStore<NotificationsState>;\n\nfunction getDistributedNotifications(\n  data: NotificationData[],\n  defaultPosition: NotificationPosition,\n  limit: number\n) {\n  const queue: NotificationData[] = [];\n  const notifications: NotificationData[] = [];\n  const count: Record<string, number> = {};\n\n  for (const item of data) {\n    const position = item.position || defaultPosition;\n    count[position] = count[position] || 0;\n    count[position] += 1;\n\n    if (count[position] <= limit) {\n      notifications.push(item);\n    } else {\n      queue.push(item);\n    }\n  }\n\n  return { notifications, queue };\n}\n\nexport const createNotificationsStore = () =>\n  createStore<NotificationsState>({\n    notifications: [],\n    queue: [],\n    defaultPosition: 'bottom-right',\n    limit: 5,\n  });\n\nexport const notificationsStore = createNotificationsStore();\nexport const useNotifications = (store: NotificationsStore = notificationsStore) => useStore(store);\n\nexport function updateNotificationsState(\n  store: NotificationsStore,\n  update: (notifications: NotificationData[]) => NotificationData[]\n) {\n  const state = store.getState();\n  const notifications = update([...state.notifications, ...state.queue]);\n  const updated = getDistributedNotifications(notifications, state.defaultPosition, state.limit);\n\n  store.setState({\n    notifications: updated.notifications,\n    queue: updated.queue,\n    limit: state.limit,\n    defaultPosition: state.defaultPosition,\n  });\n}\n\nexport function showNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  const id = notification.id || randomId();\n\n  updateNotificationsState(store, (notifications) => {\n    if (notification.id && notifications.some((n) => n.id === notification.id)) {\n      return notifications;\n    }\n\n    return [...notifications, { ...notification, id }];\n  });\n\n  return id;\n}\n\nexport function hideNotification(id: string, store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.filter((notification) => {\n      if (notification.id === id) {\n        notification.onClose?.(notification);\n        return false;\n      }\n\n      return true;\n    })\n  );\n\n  return id;\n}\n\nexport function updateNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.map((item) => {\n      if (item.id === notification.id) {\n        return { ...item, ...notification };\n      }\n\n      return item;\n    })\n  );\n\n  return notification.id;\n}\n\nexport function cleanNotifications(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, () => []);\n}\n\nexport function cleanNotificationsQueue(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.slice(0, store.getState().limit)\n  );\n}\n\nexport const notifications = {\n  show: showNotification,\n  hide: hideNotification,\n  update: updateNotification,\n  clean: cleanNotifications,\n  cleanQueue: cleanNotificationsQueue,\n  updateState: updateNotificationsState,\n} as const;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}