{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { getPath } from '../../paths/get-path.mjs';\nimport 'klona/full';\nfunction useFormWatch({\n  $status\n}) {\n  const subscribers = useRef({});\n  const watch = useCallback((path, callback) => {\n    useEffect(() => {\n      subscribers.current[path] = subscribers.current[path] || [];\n      subscribers.current[path].push(callback);\n      return () => {\n        subscribers.current[path] = subscribers.current[path].filter(cb => cb !== callback);\n      };\n    }, [callback]);\n  }, []);\n  const getFieldSubscribers = useCallback(path => {\n    if (!subscribers.current[path]) {\n      return [];\n    }\n    return subscribers.current[path].map(callback => input => callback({\n      previousValue: getPath(path, input.previousValues),\n      value: getPath(path, input.updatedValues),\n      touched: $status.isTouched(path),\n      dirty: $status.isDirty(path)\n    }));\n  }, []);\n  return {\n    subscribers,\n    watch,\n    getFieldSubscribers\n  };\n}\nexport { useFormWatch };","map":{"version":3,"names":["useFormWatch","$status","subscribers","useRef","watch","useCallback","path","callback","useEffect","current","push","filter","cb","getFieldSubscribers","map","input","previousValue","getPath","previousValues","value","updatedValues","touched","isTouched","dirty","isDirty"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/hooks/use-form-watch/use-form-watch.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { getPath } from '../../paths';\nimport { FormFieldSubscriber, LooseKeys, Watch } from '../../types';\nimport { $FormStatus } from '../use-form-status/use-form-status';\nimport { SetValuesSubscriberPayload } from '../use-form-values/use-form-values';\n\ninterface UseFormWatchInput<Values extends Record<string, any>> {\n  $status: $FormStatus<Values>;\n}\n\nexport function useFormWatch<Values extends Record<string, any>>({\n  $status,\n}: UseFormWatchInput<Values>) {\n  const subscribers = useRef<Record<LooseKeys<Values>, FormFieldSubscriber<Values, any>[]>>(\n    {} as any\n  );\n\n  const watch: Watch<Values> = useCallback((path, callback) => {\n    useEffect(() => {\n      subscribers.current[path] = subscribers.current[path] || [];\n      subscribers.current[path].push(callback);\n\n      return () => {\n        subscribers.current[path] = subscribers.current[path].filter((cb) => cb !== callback);\n      };\n    }, [callback]);\n  }, []);\n\n  const getFieldSubscribers = useCallback((path: LooseKeys<Values>) => {\n    if (!subscribers.current[path]) {\n      return [];\n    }\n\n    return subscribers.current[path].map(\n      (callback) => (input: SetValuesSubscriberPayload<Values>) =>\n        callback({\n          previousValue: getPath(path, input.previousValues) as any,\n          value: getPath(path, input.updatedValues) as any,\n          touched: $status.isTouched(path),\n          dirty: $status.isDirty(path),\n        })\n    );\n  }, []);\n\n  return {\n    subscribers,\n    watch,\n    getFieldSubscribers,\n  };\n}\n"],"mappings":";;;;;AAUO,SAASA,YAAiDA,CAAA;EAC/DC;AACF,CAA8B;EAC5B,MAAMC,WAAc,GAAAC,MAAA,CAClB,EACF;EAEA,MAAMC,KAAuB,GAAAC,WAAA,CAAY,CAACC,IAAA,EAAMC,QAAa;IAC3DC,SAAA,CAAU,MAAM;MACdN,WAAA,CAAYO,OAAA,CAAQH,IAAI,IAAIJ,WAAA,CAAYO,OAAQ,CAAAH,IAAI,KAAK,EAAC;MAC1DJ,WAAA,CAAYO,OAAQ,CAAAH,IAAI,CAAE,CAAAI,IAAA,CAAKH,QAAQ;MAEvC,OAAO,MAAM;QACCL,WAAA,CAAAO,OAAA,CAAQH,IAAI,IAAIJ,WAAY,CAAAO,OAAA,CAAQH,IAAI,EAAEK,MAAO,CAACC,EAAO,IAAAA,EAAA,KAAOL,QAAQ;MACtF;IAAA,CACF,EAAG,CAACA,QAAQ,CAAC;EACf,GAAG,EAAE;EAEC,MAAAM,mBAAA,GAAsBR,WAAY,CAACC,IAA4B;IACnE,IAAI,CAACJ,WAAA,CAAYO,OAAQ,CAAAH,IAAI,CAAG;MAC9B,OAAO,EAAC;IAAA;IAGH,OAAAJ,WAAA,CAAYO,OAAQ,CAAAH,IAAI,CAAE,CAAAQ,GAAA,CAC9BP,QAAA,IAAcQ,KAAA,IACbR,QAAS;MACPS,aAAe,EAAAC,OAAA,CAAQX,IAAM,EAAAS,KAAA,CAAMG,cAAc;MACjDC,KAAO,EAAAF,OAAA,CAAQX,IAAM,EAAAS,KAAA,CAAMK,aAAa;MACxCC,OAAA,EAASpB,OAAQ,CAAAqB,SAAA,CAAUhB,IAAI;MAC/BiB,KAAA,EAAOtB,OAAQ,CAAAuB,OAAA,CAAQlB,IAAI;IAC5B,EACL;EACF,GAAG,EAAE;EAEE;IACLJ,WAAA;IACAE,KAAA;IACAS;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}