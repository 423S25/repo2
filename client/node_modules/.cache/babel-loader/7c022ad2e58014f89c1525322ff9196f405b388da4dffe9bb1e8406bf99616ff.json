{"ast":null,"code":"'use client';\n\nimport { filterErrors } from '../hooks/use-form-errors/filter-errors/filter-errors.mjs';\nimport { getPath } from '../paths/get-path.mjs';\nimport 'klona/full';\nconst formRootRule = Symbol(\"root-rule\");\nfunction getValidationResults(errors) {\n  const filteredErrors = filterErrors(errors);\n  return {\n    hasErrors: Object.keys(filteredErrors).length > 0,\n    errors: filteredErrors\n  };\n}\nfunction validateRulesRecord(rules, values, path = \"\", errors = {}) {\n  if (typeof rules !== \"object\" || rules === null) {\n    return errors;\n  }\n  return Object.keys(rules).reduce((acc, ruleKey) => {\n    const rule = rules[ruleKey];\n    const rulePath = `${path === \"\" ? \"\" : `${path}.`}${ruleKey}`;\n    const value = getPath(rulePath, values);\n    let arrayValidation = false;\n    if (typeof rule === \"function\") {\n      acc[rulePath] = rule(value, values, rulePath);\n    }\n    if (typeof rule === \"object\" && Array.isArray(value)) {\n      arrayValidation = true;\n      value.forEach((_item, index) => validateRulesRecord(rule, values, `${rulePath}.${index}`, acc));\n      if (formRootRule in rule) {\n        acc[rulePath] = rule[formRootRule](value, values, rulePath);\n      }\n    }\n    if (typeof rule === \"object\" && typeof value === \"object\" && value !== null) {\n      if (!arrayValidation) {\n        validateRulesRecord(rule, values, rulePath, acc);\n      }\n      if (formRootRule in rule) {\n        acc[rulePath] = rule[formRootRule](value, values, rulePath);\n      }\n    }\n    return acc;\n  }, errors);\n}\nfunction validateValues(validate, values) {\n  if (typeof validate === \"function\") {\n    return getValidationResults(validate(values));\n  }\n  return getValidationResults(validateRulesRecord(validate, values));\n}\nexport { formRootRule, validateValues };","map":{"version":3,"names":["formRootRule","Symbol","getValidationResults","errors","filteredErrors","filterErrors","hasErrors","Object","keys","length","validateRulesRecord","rules","values","path","reduce","acc","ruleKey","rule","rulePath","value","getPath","arrayValidation","Array","isArray","forEach","_item","index","validateValues","validate"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/validate/validate-values.ts"],"sourcesContent":["import { filterErrors } from '../hooks/use-form-errors/filter-errors/filter-errors';\nimport { getPath } from '../paths';\nimport { FormErrors, FormRule, FormRulesRecord, FormValidateInput } from '../types';\n\nexport const formRootRule = Symbol('root-rule');\n\nfunction getValidationResults(errors: FormErrors) {\n  const filteredErrors = filterErrors(errors);\n  return { hasErrors: Object.keys(filteredErrors).length > 0, errors: filteredErrors };\n}\n\nfunction validateRulesRecord<T>(\n  rules: FormRulesRecord<T> | undefined,\n  values: T,\n  path = '',\n  errors: FormErrors = {}\n) {\n  if (typeof rules !== 'object' || rules === null) {\n    return errors;\n  }\n\n  return Object.keys(rules).reduce((acc, ruleKey) => {\n    const rule: FormRule<any, any> = (rules as any)[ruleKey];\n    const rulePath = `${path === '' ? '' : `${path}.`}${ruleKey}`;\n    const value = getPath(rulePath, values);\n    let arrayValidation = false;\n\n    if (typeof rule === 'function') {\n      acc[rulePath] = rule(value, values, rulePath);\n    }\n\n    if (typeof rule === 'object' && Array.isArray(value)) {\n      arrayValidation = true;\n      value.forEach((_item, index) =>\n        validateRulesRecord(rule, values, `${rulePath}.${index}`, acc)\n      );\n\n      if (formRootRule in rule) {\n        acc[rulePath] = (rule as any)[formRootRule](value, values, rulePath);\n      }\n    }\n\n    if (typeof rule === 'object' && typeof value === 'object' && value !== null) {\n      if (!arrayValidation) {\n        validateRulesRecord(rule, values, rulePath, acc);\n      }\n\n      if (formRootRule in rule) {\n        acc[rulePath] = (rule as any)[formRootRule](value, values, rulePath);\n      }\n    }\n\n    return acc;\n  }, errors);\n}\n\nexport function validateValues<T>(validate: FormValidateInput<T> | undefined, values: T) {\n  if (typeof validate === 'function') {\n    return getValidationResults(validate(values));\n  }\n\n  return getValidationResults(validateRulesRecord(validate, values));\n}\n"],"mappings":";;;;;AAIa,MAAAA,YAAA,GAAeC,MAAA,CAAO,WAAW;AAE9C,SAASC,qBAAqBC,MAAoB;EAC1C,MAAAC,cAAA,GAAiBC,YAAA,CAAaF,MAAM;EACnC;IAAEG,SAAA,EAAWC,MAAO,CAAAC,IAAA,CAAKJ,cAAc,CAAE,CAAAK,MAAA,GAAS,CAAG;IAAAN,MAAA,EAAQC;EAAe;AACrF;AAEA,SAASM,oBACPC,KACA,EAAAC,MAAA,EACAC,IAAA,GAAO,EACP,EAAAV,MAAA,GAAqB,EACrB;EACA,IAAI,OAAOQ,KAAA,KAAU,QAAY,IAAAA,KAAA,KAAU,IAAM;IACxC,OAAAR,MAAA;EAAA;EAGT,OAAOI,MAAA,CAAOC,IAAK,CAAAG,KAAK,EAAEG,MAAO,EAACC,GAAA,EAAKC,OAAY;IAC3C,MAAAC,IAAA,GAA4BN,KAAA,CAAcK,OAAO;IACjD,MAAAE,QAAA,GAAW,GAAGL,IAAS,UAAK,KAAK,GAAGA,IAAI,GAAG,GAAGG,OAAO;IACrD,MAAAG,KAAA,GAAQC,OAAQ,CAAAF,QAAA,EAAUN,MAAM;IACtC,IAAIS,eAAkB;IAElB,WAAOJ,IAAA,KAAS,UAAY;MAC9BF,GAAA,CAAIG,QAAQ,IAAID,IAAK,CAAAE,KAAA,EAAOP,MAAA,EAAQM,QAAQ;IAAA;IAG9C,IAAI,OAAOD,IAAS,iBAAYK,KAAM,CAAAC,OAAA,CAAQJ,KAAK,CAAG;MAClCE,eAAA;MACZF,KAAA,CAAAK,OAAA,CAAQ,CAACC,KAAO,EAAAC,KAAA,KACpBhB,mBAAoB,CAAAO,IAAA,EAAML,MAAQ,KAAGM,QAAQ,IAAIQ,KAAK,IAAIX,GAAG,CAC/D;MAEA,IAAIf,YAAA,IAAgBiB,IAAM;QACxBF,GAAA,CAAIG,QAAQ,CAAK,GAAAD,IAAA,CAAajB,YAAY,CAAE,CAAAmB,KAAA,EAAOP,MAAA,EAAQM,QAAQ;MAAA;IACrE;IAGF,IAAI,OAAOD,IAAS,iBAAY,OAAOE,KAAU,iBAAYA,KAAA,KAAU,IAAM;MAC3E,IAAI,CAACE,eAAiB;QACAX,mBAAA,CAAAO,IAAA,EAAML,MAAQ,EAAAM,QAAA,EAAUH,GAAG;MAAA;MAGjD,IAAIf,YAAA,IAAgBiB,IAAM;QACxBF,GAAA,CAAIG,QAAQ,CAAK,GAAAD,IAAA,CAAajB,YAAY,CAAE,CAAAmB,KAAA,EAAOP,MAAA,EAAQM,QAAQ;MAAA;IACrE;IAGK,OAAAH,GAAA;EAAA,GACNZ,MAAM;AACX;AAEgB,SAAAwB,eAAkBC,QAAA,EAA4ChB,MAAW;EACnF,WAAOgB,QAAA,KAAa,UAAY;IAC3B,OAAA1B,oBAAA,CAAqB0B,QAAS,CAAAhB,MAAM,CAAC;EAAA;EAG9C,OAAOV,oBAAqB,CAAAQ,mBAAA,CAAoBkB,QAAU,EAAAhB,MAAM,CAAC;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}