{"ast":null,"code":"'use client';\n\nimport { useSyncExternalStore } from 'react';\nfunction createStore(initialState) {\n  let state = initialState;\n  let initialized = false;\n  const listeners = /* @__PURE__ */new Set();\n  return {\n    getState() {\n      return state;\n    },\n    updateState(value) {\n      state = typeof value === \"function\" ? value(state) : value;\n    },\n    setState(value) {\n      this.updateState(value);\n      listeners.forEach(listener => listener(state));\n    },\n    initialize(value) {\n      if (!initialized) {\n        state = value;\n        initialized = true;\n      }\n    },\n    subscribe(callback) {\n      listeners.add(callback);\n      return () => listeners.delete(callback);\n    }\n  };\n}\nfunction useStore(store) {\n  return useSyncExternalStore(store.subscribe, () => store.getState(), () => store.getState());\n}\nexport { createStore, useStore };","map":{"version":3,"names":["createStore","initialState","state","initialized","listeners","Set","getState","updateState","value","setState","forEach","listener","initialize","subscribe","callback","add","delete","useStore","store","useSyncExternalStore"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/store/src/store.ts"],"sourcesContent":["import { useSyncExternalStore } from 'react';\n\nexport type MantineStoreSubscriber<Value> = (value: Value) => void;\ntype SetStateCallback<Value> = (value: Value) => Value;\n\nexport interface MantineStore<Value> {\n  getState: () => Value;\n  setState: (value: Value | SetStateCallback<Value>) => void;\n  updateState: (value: Value | SetStateCallback<Value>) => void;\n  initialize: (value: Value) => void;\n  subscribe: (callback: MantineStoreSubscriber<Value>) => () => void;\n}\n\nexport type MantineStoreValue<Store extends MantineStore<any>> = ReturnType<Store['getState']>;\n\nexport function createStore<Value extends Record<string, any>>(\n  initialState: Value\n): MantineStore<Value> {\n  let state = initialState;\n  let initialized = false;\n  const listeners = new Set<MantineStoreSubscriber<Value>>();\n\n  return {\n    getState() {\n      return state;\n    },\n\n    updateState(value) {\n      state = typeof value === 'function' ? value(state) : value;\n    },\n\n    setState(value) {\n      this.updateState(value);\n      listeners.forEach((listener) => listener(state));\n    },\n\n    initialize(value) {\n      if (!initialized) {\n        state = value;\n        initialized = true;\n      }\n    },\n\n    subscribe(callback) {\n      listeners.add(callback);\n      return () => listeners.delete(callback);\n    },\n  };\n}\n\nexport function useStore<Store extends MantineStore<any>>(store: Store) {\n  return useSyncExternalStore<MantineStoreValue<Store>>(\n    store.subscribe,\n    () => store.getState(),\n    () => store.getState()\n  );\n}\n"],"mappings":";;;AAeO,SAASA,YACdC,YACqB;EACrB,IAAIC,KAAQ,GAAAD,YAAA;EACZ,IAAIE,WAAc;EACZ,MAAAC,SAAA,sBAAgBC,GAAmC;EAElD;IACLC,QAAWA,CAAA;MACF,OAAAJ,KAAA;IACT;IAEAK,YAAYC,KAAO;MACjBN,KAAA,GAAQ,OAAOM,KAAA,KAAU,UAAa,GAAAA,KAAA,CAAMN,KAAK,CAAI,GAAAM,KAAA;IACvD;IAEAC,SAASD,KAAO;MACd,KAAKD,WAAA,CAAYC,KAAK;MACtBJ,SAAA,CAAUM,OAAQ,CAACC,QAAa,IAAAA,QAAA,CAAST,KAAK,CAAC;IACjD;IAEAU,WAAWJ,KAAO;MAChB,IAAI,CAACL,WAAa;QACRD,KAAA,GAAAM,KAAA;QACML,WAAA;MAAA;IAElB;IAEAU,UAAUC,QAAU;MAClBV,SAAA,CAAUW,GAAA,CAAID,QAAQ;MACf,aAAMV,SAAU,CAAAY,MAAA,CAAOF,QAAQ;IAAA;EAE1C;AACF;AAEO,SAASG,SAA0CC,KAAc;EAC/D,OAAAC,oBAAA,CACLD,KAAM,CAAAL,SAAA,EACN,MAAMK,KAAA,CAAMZ,QAAS,IACrB,MAAMY,KAAA,CAAMZ,QAAS,EACvB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}