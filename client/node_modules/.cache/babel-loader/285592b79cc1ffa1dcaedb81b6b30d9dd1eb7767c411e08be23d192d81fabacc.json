{"ast":null,"code":"'use client';\n\nfunction zodResolver(schema) {\n  return values => {\n    const parsed = schema.safeParse(values);\n    if (parsed.success) {\n      return {};\n    }\n    const results = {};\n    parsed.error.errors.forEach(error => {\n      results[error.path.join(\".\")] = error.message;\n    });\n    return results;\n  };\n}\nexport { zodResolver };","map":{"version":3,"names":["zodResolver","schema","values","parsed","safeParse","success","results","error","errors","forEach","path","join","message"],"sources":["/Users/jackson/loginsystem/client/node_modules/@mantine/form/src/resolvers/zod-resolver/zod-resolver.ts"],"sourcesContent":["import type { FormErrors } from '../../types';\n\ninterface ZodError {\n  path: (string | number)[];\n  message: string;\n}\n\ninterface ZodParseSuccess {\n  success: true;\n}\n\ninterface ZodParseError {\n  success: false;\n  error: {\n    errors: ZodError[];\n  };\n}\n\ninterface ZodSchema<T extends Record<string, any>> {\n  safeParse: (values: T) => ZodParseSuccess | ZodParseError;\n}\n\nexport function zodResolver<T extends Record<string, any>>(schema: ZodSchema<T>) {\n  return (values: T): FormErrors => {\n    const parsed = schema.safeParse(values);\n\n    if (parsed.success) {\n      return {};\n    }\n\n    const results: Record<string, any> = {};\n\n    (parsed as ZodParseError).error.errors.forEach((error) => {\n      results[error.path.join('.')] = error.message;\n    });\n\n    return results;\n  };\n}\n"],"mappings":";;AAsBO,SAASA,YAA2CC,MAAsB;EAC/E,OAAQC,MAA0B;IAC1B,MAAAC,MAAA,GAASF,MAAO,CAAAG,SAAA,CAAUF,MAAM;IAEtC,IAAIC,MAAA,CAAOE,OAAS;MAClB,OAAO,CAAC;IAAA;IAGV,MAAMC,OAAA,GAA+B,CAAC;IAErCH,MAAyB,CAAAI,KAAA,CAAMC,MAAO,CAAAC,OAAA,CAASF,KAAU;MACxDD,OAAA,CAAQC,KAAA,CAAMG,IAAK,CAAAC,IAAA,CAAK,GAAG,CAAC,IAAIJ,KAAM,CAAAK,OAAA;IAAA,CACvC;IAEM,OAAAN,OAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}